// <auto-generated />
using System;
using System.Collections.Generic;
using HospitalLibrary.Core.Model;
using HospitalLibrary.Patients.Model;
using HospitalLibrary.Settings;
using HospitalLibrary.Users.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20221216094114_admissionReason")]
    partial class admissionReason
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AllergiePatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("PatientAllergies");
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.Property<Guid>("ConsiliumsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DoctorsId")
                        .HasColumnType("uuid");

                    b.HasKey("ConsiliumsId", "DoctorsId");

                    b.HasIndex("DoctorsId");

                    b.ToTable("ConsiliumDoctor");
                });

            modelBuilder.Entity("HospitalLibrary.AcountActivation.Model.AcountActivationInfo", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActivationToken")
                        .HasColumnType("uuid");

                    b.HasKey("PersonId");

                    b.ToTable("AcountActivationInfos");
                });

            modelBuilder.Entity("HospitalLibrary.AdmissionHistories.Model.AdmissionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdmissionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DischargeReason")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionId");

                    b.ToTable("AdmissionHistories");
                });

            modelBuilder.Entity("HospitalLibrary.Admissions.Model.Admission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TreatmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("arrivalDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("HospitalLibrary.Allergies.Model.Allergie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptionRecords.Model.BloodConsumptionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BloodType")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("BloodConsumptionRecords");
                });

            modelBuilder.Entity("HospitalLibrary.BloodSupplies.Model.BloodSupply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("BloodSupply");
                });

            modelBuilder.Entity("HospitalLibrary.BuildingManagment.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("HospitalLibrary.BuildingManagment.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<short>("Number")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.BuildingManagmentMap.Model.MapItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MapItem");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MapItem");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Appointments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Appointment");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<Jmbg>("Jmbg")
                        .HasColumnType("jsonb");

                    b.Property<string>("LicenceNum")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Speciality")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("WorkingTimeEnd")
                        .HasColumnType("text");

                    b.Property<string>("WorkingTimeStart")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("RoomId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAnonimous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDesiredPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.MoveEquipment.Model.EquipmentToMove", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("EquipmentToMoves");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.AgeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GropuName")
                        .HasColumnType("text");

                    b.Property<int>("MaxAge")
                        .HasColumnType("integer");

                    b.Property<int>("MinAge")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AgeGroups");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ChosenDoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<Jmbg>("Jmbg")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ChosenDoctorId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Reports.Model.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("MedicalAppointmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedicalAppointmentId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEqipment.Model.Bed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<Guid>("equipmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("equipmentId");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEqipment.Model.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEqipment.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Room");
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEqipment.Model.RoomsEquipment", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("RoomId", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("RoomsEquipment");
                });

            modelBuilder.Entity("HospitalLibrary.Symptoms.Model.Symptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("HospitalLibrary.Treatments.Model.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BloodConsumptionRecordId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateChanged")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("MedicineId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BloodConsumptionRecordId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("HospitalLibrary.Users.Model.User", b =>
                {
                    b.Property<string>("Username")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<bool>("IsAccountActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Password>("Password")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<List<SuspiciousActivity>>("suspicious_activities")
                        .HasColumnType("jsonb");

                    b.HasKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HospitalLibrary.Vacations.Model.Vacation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeniedRequestReason")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<bool>("Urgent")
                        .HasColumnType("boolean");

                    b.Property<int>("VacationStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("MedicinePrescription", b =>
                {
                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrescriptionsId")
                        .HasColumnType("uuid");

                    b.HasKey("MedicinesId", "PrescriptionsId");

                    b.HasIndex("PrescriptionsId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("ReportSymptom", b =>
                {
                    b.Property<Guid>("ReportsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymptomsId")
                        .HasColumnType("uuid");

                    b.HasKey("ReportsId", "SymptomsId");

                    b.HasIndex("SymptomsId");

                    b.ToTable("ReportSymptom");
                });

            modelBuilder.Entity("HospitalLibrary.BuildingManagmentMap.Model.BuildingMap", b =>
                {
                    b.HasBaseType("HospitalLibrary.BuildingManagmentMap.Model.MapItem");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("uuid");

                    b.HasIndex("BuildingId");

                    b.HasDiscriminator().HasValue("BuildingMap");
                });

            modelBuilder.Entity("HospitalLibrary.BuildingManagmentMap.Model.FloorMap", b =>
                {
                    b.HasBaseType("HospitalLibrary.BuildingManagmentMap.Model.MapItem");

                    b.Property<Guid?>("FloorId")
                        .HasColumnType("uuid");

                    b.HasIndex("FloorId");

                    b.HasDiscriminator().HasValue("FloorMap");
                });

            modelBuilder.Entity("HospitalLibrary.BuildingManagmentMap.Model.RoomMap", b =>
                {
                    b.HasBaseType("HospitalLibrary.BuildingManagmentMap.Model.MapItem");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId");

                    b.HasDiscriminator().HasValue("RoomMap");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.MedicalAppointment", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.Appointment");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasDiscriminator().HasValue("MedicalAppointment");
                });

            modelBuilder.Entity("HospitalLibrary.Consiliums.Model.Consilium", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.Appointment");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Consilium");
                });

            modelBuilder.Entity("HospitalLibrary.MoveEquipment.Model.MoveEquipmentAppointment", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.Appointment");

                    b.Property<Guid?>("EquipmentToMoveId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasIndex("EquipmentToMoveId");

                    b.HasDiscriminator().HasValue("MoveEquipmentAppointment");
                });

            modelBuilder.Entity("HospitalLibrary.Renovation.Model.RenovationAppointment", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.Appointment");

                    b.Property<string>("RoomRenovationPlans")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("RenovationAppointment_Type");

                    b.HasDiscriminator().HasValue("RenovationAppointment");
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEqipment.Model.CafeteriaRoom", b =>
                {
                    b.HasBaseType("HospitalLibrary.RoomsAndEqipment.Model.Room");

                    b.Property<string>("Workhours")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("CafeteriaRoom");
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEqipment.Model.DoctorRoom", b =>
                {
                    b.HasBaseType("HospitalLibrary.RoomsAndEqipment.Model.Room");

                    b.HasDiscriminator().HasValue("DoctorRoom");
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEqipment.Model.PatientRoom", b =>
                {
                    b.HasBaseType("HospitalLibrary.RoomsAndEqipment.Model.Room");

                    b.Property<List<Guid>>("BedIds")
                        .HasColumnType("uuid[]");

                    b.HasDiscriminator().HasValue("PatientRoom");
                });

            modelBuilder.Entity("AllergiePatient", b =>
                {
                    b.HasOne("HospitalLibrary.Allergies.Model.Allergie", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.HasOne("HospitalLibrary.Consiliums.Model.Consilium", null)
                        .WithMany()
                        .HasForeignKey("ConsiliumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.AdmissionHistories.Model.AdmissionHistory", b =>
                {
                    b.HasOne("HospitalLibrary.Admissions.Model.Admission", "Admission")
                        .WithMany()
                        .HasForeignKey("AdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admission");
                });

            modelBuilder.Entity("HospitalLibrary.Admissions.Model.Admission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.RoomsAndEqipment.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Treatments.Model.Treatment", "Treatments")
                        .WithMany()
                        .HasForeignKey("TreatmentId");

                    b.OwnsOne("HospitalLibrary.Admissions.Model.Reason", "Reason", b1 =>
                        {
                            b1.Property<Guid>("AdmissionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Text")
                                .HasColumnType("text")
                                .HasColumnName("ReasonText");

                            b1.HasKey("AdmissionId");

                            b1.ToTable("Admissions");

                            b1.WithOwner()
                                .HasForeignKey("AdmissionId");
                        });

                    b.Navigation("Patient");

                    b.Navigation("Reason");

                    b.Navigation("Room");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptionRecords.Model.BloodConsumptionRecord", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.BloodConsumptionRecords.Model.Amount", "Amount", b1 =>
                        {
                            b1.Property<Guid>("BloodConsumptionRecordId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Value")
                                .HasColumnType("double precision")
                                .HasColumnName("AmountValue");

                            b1.HasKey("BloodConsumptionRecordId");

                            b1.ToTable("BloodConsumptionRecords");

                            b1.WithOwner()
                                .HasForeignKey("BloodConsumptionRecordId");
                        });

                    b.Navigation("Amount");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.BloodSupplies.Model.BloodSupply", b =>
                {
                    b.OwnsOne("IntegrationLibrary.Common.BloodType", "BloodType", b1 =>
                        {
                            b1.Property<Guid>("BloodSupplyId")
                                .HasColumnType("uuid");

                            b1.Property<int>("BloodGroup")
                                .HasMaxLength(1)
                                .HasColumnType("integer")
                                .HasColumnName("BloodGroup");

                            b1.Property<int>("RhFactor")
                                .HasMaxLength(10)
                                .HasColumnType("integer")
                                .HasColumnName("RhFactor");

                            b1.HasKey("BloodSupplyId");

                            b1.ToTable("BloodSupply");

                            b1.WithOwner()
                                .HasForeignKey("BloodSupplyId");
                        });

                    b.Navigation("BloodType");
                });

            modelBuilder.Entity("HospitalLibrary.BuildingManagment.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.BuildingManagment.Model.Building", null)
                        .WithMany("FloorList")
                        .HasForeignKey("BuildingId");
                });

            modelBuilder.Entity("HospitalLibrary.BuildingManagmentMap.Model.MapItem", b =>
                {
                    b.OwnsOne("HospitalLibrary.BuildingManagmentMap.Model.MapLocation", "MapLocation", b1 =>
                        {
                            b1.Property<Guid>("MapItemId")
                                .HasColumnType("uuid");

                            b1.Property<int>("CoordinateX")
                                .HasColumnType("integer")
                                .HasColumnName("CoordinateX");

                            b1.Property<int>("CoordinateY")
                                .HasColumnType("integer")
                                .HasColumnName("CoordinateY");

                            b1.Property<int>("Height")
                                .HasColumnType("integer")
                                .HasColumnName("Height");

                            b1.Property<int>("Width")
                                .HasColumnType("integer")
                                .HasColumnName("Width");

                            b1.HasKey("MapItemId");

                            b1.ToTable("MapItem");

                            b1.WithOwner()
                                .HasForeignKey("MapItemId");
                        });

                    b.Navigation("MapLocation");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.RoomsAndEqipment.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.OwnsOne("HospitalLibrary.Core.Model.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("EndTime");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("StartTime");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.RoomsAndEqipment.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Core.Model.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("DoctorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .HasColumnType("text")
                                .HasColumnName("EmailAddress");

                            b1.HasKey("DoctorId");

                            b1.ToTable("Doctors");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Email");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.MoveEquipment.Model.EquipmentToMove", b =>
                {
                    b.HasOne("HospitalLibrary.RoomsAndEqipment.Model.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "ChosenDoctor")
                        .WithMany()
                        .HasForeignKey("ChosenDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Core.Model.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .HasColumnType("text")
                                .HasColumnName("EmailAddress");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("IntegrationLibrary.Common.BloodType", "BloodType", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uuid");

                            b1.Property<int>("BloodGroup")
                                .HasMaxLength(1)
                                .HasColumnType("integer")
                                .HasColumnName("BloodGroup");

                            b1.Property<int>("RhFactor")
                                .HasMaxLength(10)
                                .HasColumnType("integer")
                                .HasColumnName("RhFactor");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.Navigation("Address");

                    b.Navigation("BloodType");

                    b.Navigation("ChosenDoctor");

                    b.Navigation("Email");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.Prescription", b =>
                {
                    b.HasOne("HospitalLibrary.Reports.Model.Report", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Reports.Model.Report", b =>
                {
                    b.HasOne("HospitalLibrary.Appointments.Model.MedicalAppointment", "MedicalAppointment")
                        .WithMany()
                        .HasForeignKey("MedicalAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalAppointment");
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEqipment.Model.Bed", b =>
                {
                    b.HasOne("HospitalLibrary.RoomsAndEqipment.Model.Equipment", "equipment")
                        .WithMany()
                        .HasForeignKey("equipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("equipment");
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEqipment.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.BuildingManagment.Model.Floor", null)
                        .WithMany("RoomList")
                        .HasForeignKey("FloorId");
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEqipment.Model.RoomsEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.RoomsAndEqipment.Model.Equipment", "Equipment")
                        .WithMany("RoomsEquipment")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.RoomsAndEqipment.Model.Room", "Room")
                        .WithMany("RoomsEquipment")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Treatments.Model.Treatment", b =>
                {
                    b.HasOne("HospitalLibrary.BloodConsumptionRecords.Model.BloodConsumptionRecord", "BloodConsumptionRecord")
                        .WithMany()
                        .HasForeignKey("BloodConsumptionRecordId");

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.Navigation("BloodConsumptionRecord");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("HospitalLibrary.Vacations.Model.Vacation", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Prescriptions.Model.Prescription", null)
                        .WithMany()
                        .HasForeignKey("PrescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReportSymptom", b =>
                {
                    b.HasOne("HospitalLibrary.Reports.Model.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Symptoms.Model.Symptom", null)
                        .WithMany()
                        .HasForeignKey("SymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.BuildingManagmentMap.Model.BuildingMap", b =>
                {
                    b.HasOne("HospitalLibrary.BuildingManagment.Model.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.BuildingManagmentMap.Model.FloorMap", b =>
                {
                    b.HasOne("HospitalLibrary.BuildingManagment.Model.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.BuildingManagmentMap.Model.RoomMap", b =>
                {
                    b.HasOne("HospitalLibrary.RoomsAndEqipment.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.MedicalAppointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.MoveEquipment.Model.MoveEquipmentAppointment", b =>
                {
                    b.HasOne("HospitalLibrary.MoveEquipment.Model.EquipmentToMove", "EquipmentToMove")
                        .WithMany()
                        .HasForeignKey("EquipmentToMoveId");

                    b.Navigation("EquipmentToMove");
                });

            modelBuilder.Entity("HospitalLibrary.BuildingManagment.Model.Building", b =>
                {
                    b.Navigation("FloorList");
                });

            modelBuilder.Entity("HospitalLibrary.BuildingManagment.Model.Floor", b =>
                {
                    b.Navigation("RoomList");
                });

            modelBuilder.Entity("HospitalLibrary.Reports.Model.Report", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEqipment.Model.Equipment", b =>
                {
                    b.Navigation("RoomsEquipment");
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEqipment.Model.Room", b =>
                {
                    b.Navigation("RoomsEquipment");
                });
#pragma warning restore 612, 618
        }
    }
}
